/* dCodes Framework */
(function($) {

apPlaylistManager = function() {
	
	var self = this;
	
	var _loopingOn;
	var _randomPlay;
	var _playlistItems;
	var _lastInOrder = false;
	var _counter = -1;
	var _lastPlayedFromPlaylistClick;//last played on click.
	var _lastRandomCounter;//last played random media in random playlist.
	var _randomPaused = false;//when random is playing and we interrupt it by click on the playlist.
	var _traceCounter = false;	
	var _randomArr = [];
	var _playlistSelect = false;//prevent geting counter from randomArr on playlist click (get 'normal' counter instead)
		
	this.init =function(loopingOn, randomPlay){
		_loopingOn = loopingOn;
		_randomPlay = randomPlay;
	}	
	
	this.setCounter = function( value, _add ) {//set counter to specific number or add it to the currect counter value
		if(_add){
			_counter += parseInt(value, 10);
		}else{
			_counter = parseInt(value, 10);
		}
		//console.log('setCounter ', _counter);
		checkCounter();
	}
	
	this.getCounter = function() {
		var i;
		if(_randomPlay){
			if(!_playlistSelect){
				i = _randomArr[_counter];
			}else{
				i = _counter;
			}
		}else{
			i = _counter;
		}
		return i;
	}
	
	this.advanceHandler = function(a, _add) {
		_playlistSelect = false;//reset
		if(_randomPaused){
			this.handleRandomPaused(a);
		}else{
			//console.log('here ', a, _add);
			this.setCounter(a, _add);
		}
	}
	
	this.processPlaylistRequest = function(id) {//when playlist is clicked
		_playlistSelect = false;//reset
		if(_randomPlay){
			_playlistSelect = true;
			_lastPlayedFromPlaylistClick = id;//always remember last played on each click.
			if(!_randomPaused){
				_lastRandomCounter = _counter;
				//console.log("memory = " + _lastRandomCounter);
				_randomPaused = true;//this needs to stay until random play comes back again! So that the above reference to last random counter doesnt get lost. (if we constantly clicking playlist)
			}
		}
		this.setCounter( id, false);
	}
		
	//****************
	
	function makeRandomList() {//make random set of numbers
		if(_playlistItems < 3) return;
		_randomArr = randomiseIndex(_playlistItems);
		//console.log('_randomArr = ', _randomArr);
	}
	
	this.handleRandomPaused = function(a) {//exiting _randomPaused and going back to random mode.
		//this is just an exit out of _randomPaused (because of a playlist click) and back to random again
		//console.log("handleRandomPaused");
		//console.log("_lastRandomCounter ", _lastRandomCounter);
		
		_randomPaused = false;//reset before because of the getCounter()
		
		if(_lastRandomCounter + a > _playlistItems - 1){
			_counter = _playlistItems - 1;
			//trace("end");
			//dispatchEvent(new PlaylistManagerEvent(PlaylistManagerEvent.COUNTER_READY));	
			return;
		} else if( _lastRandomCounter + a < 0){
			_counter = 0;
			//trace("beginning");
			//dispatchEvent(new PlaylistManagerEvent(PlaylistManagerEvent.COUNTER_READY));	
			return;
		}
		this.setCounter(_lastRandomCounter + a, false);
	}
	
	function randomChange() {//when random is turned on / off
		//console.log('randomChange');
		if(_randomPlay){
			activeIndexFirst();
			_counter = 0;//we have to do it like this, because with (setCounter(0, false)) media starts to play from the beginning if its already playing. (when random requested)
			//we need to say this on the every beginning of random to redirect the counter from wherever the currently is to 0, so that it becomes first index in randomArr. (after we have moved active index to beginning of randomArr)
			
		}else{
			//we are not going through setCounter here because its just getting out of random mode, and its not changing counter, it just stays where it is (playing or not)
			if(_randomPaused){
				_counter = _lastPlayedFromPlaylistClick;
				_randomPaused = false;//when random mode stops _randomPaused stops also.
			}else{
				_counter = _randomArr[_counter];//when we turn off random we need to set counter to the value of the current counter in randomArr, so if the counter is 1, and thats value 3 in randomArr for example, we want the active counter to stay 3, not 1, and next to go to 4, not 2.
			}
		}
	}
		
	function checkCounter() {
		//reset
		_lastInOrder = false;
		
		if(_loopingOn){
			if(_randomPlay){
				
				if(_counter > _playlistItems - 1){//moving fowards
					_counter = _randomArr[_playlistItems - 1];//remember counter for comparison
					makeRandomList();
					firstIndexCheck();
					_counter = 0;
					
				}else if(_counter < 0){//moving backwards
					_counter = _randomArr[0];//remember counter for comparison
					makeRandomList();
					lastIndexCheck();
					_counter = _playlistItems - 1;
				}
				
			}else{//random off
				
				if(_counter > _playlistItems - 1){
					_counter = 0;
				}else if(_counter < 0){
					_counter = _playlistItems - 1;
				}
			}
			
		}else{//looping off
			
			if(_counter > _playlistItems - 1){
				_counter = _playlistItems - 1;
				_lastInOrder = true;//last item
				//trace("last item");
			}else if(_counter < 0){
				_counter = 0;
				_lastInOrder = true;//first item
				//trace("first item");
			}
			
			if(_lastInOrder){
				
			}
		}
		
		if(_traceCounter) console.log("counter = " + self.getCounter());//ordinary cannot call this!
	}
	
	function firstIndexCheck() {
		//we need to check that first item in newly generated random array isnt equal to last active item.
		if(_randomArr[0] == _counter){//if yes, put it at the last place in array.
			var i = _randomArr.splice(0,1);
			_randomArr.push(i);
			//console.log("firstIndexCheck " + _randomArr);
		}
	}
	
	function lastIndexCheck() {
		if(_randomArr[_playlistItems - 1] == _counter){//if yes, put it at the first place in array.
			var i = _randomArr.splice(_playlistItems - 1,1);
			_randomArr.unshift(i);
			//console.log("lastIndexCheck " + _randomArr);
		}
	}
	
	function activeIndexFirst() {//when going into random (playing or not) put currently active index on the first place of random array.
		//trace("activeIndexFirst");
		var i = 0;
		var len = _randomArr.length;
		
		for(i; i < len; i++){
			
			if(_randomArr[i] == _counter){
				if(i == 0){//if its already on the first place no need for action.
					break;
				}
				var j = _randomArr.splice(i,1);
				_randomArr.unshift(j);
				//trace("activeIndexFirst " + _randomArr);
				break;
			}
		}
		//trace(_randomArr);
	}			
	
	function randomiseIndex(num){
		var arr = new Array(); 
		var randomArr = new Array();
		var i = 0;
		var j = 0;
		
		for (i; i < num; i++) {//first fill the ordered set of indexes
			arr[i] = i;
		}
		
		j = 0;
		for (j; j < num; j++) { //then randomize those indexes
			var randomIndex = Math.round(Math.random()*(arr.length-1));
			randomArr[j] = arr[randomIndex];
			arr.splice(randomIndex, 1);
		}
		return randomArr;
	}	
	
	//********************
	
	this.getLastInOrder = function () {
		return _lastInOrder;
	}
	
	this.getRandomPaused = function () {
		return _randomPaused;
	}
	
	this.setPlaylistItems = function(val)  {
		_counter = -1;
		_playlistItems = val;
		if(_randomPlay) makeRandomList();
	}
	
	this.reSetCounter = function()  {
		_counter = -1;
	}
	
	this.setRandom = function(val)  {
		_randomPlay = val;
		if(_randomPlay) makeRandomList();
		randomChange();
	}
	
	this.setLooping = function(val)  {
		_loopingOn = val;
	}
	
	this.setTraceCounter = function(val)  {
		_traceCounter = val;
	}			

}


})(jQuery);